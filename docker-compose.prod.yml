services:
  traefik:
    image: traefik:v3.1
    container_name: traefik
    command:
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entryPoints.web.address=:80
      - --entryPoints.web.transport.respondingTimeouts.readTimeout=0
      - --entryPoints.web.transport.respondingTimeouts.writeTimeout=0
      - --entryPoints.web.transport.respondingTimeouts.idleTimeout=600s
      - --entryPoints.websecure.address=:443
      - --entryPoints.websecure.transport.respondingTimeouts.readTimeout=0
      - --entryPoints.websecure.transport.respondingTimeouts.writeTimeout=0
      - --entryPoints.websecure.transport.respondingTimeouts.idleTimeout=600s
      - --entryPoints.web8080.address=:8080
      - --entryPoints.web8080.transport.respondingTimeouts.readTimeout=0
      - --entryPoints.web8080.transport.respondingTimeouts.writeTimeout=0
      - --entryPoints.web8080.transport.respondingTimeouts.idleTimeout=600s
      # Be generous with upstream timeouts for long requests
      - --serversTransport.forwardingTimeouts.dialTimeout=300s
      - --serversTransport.forwardingTimeouts.responseHeaderTimeout=600s
      - --api.dashboard=true
      # Prometheus metrics
      - --metrics.prometheus=true
      - --metrics.prometheus.addEntryPointsLabels=true
      - --metrics.prometheus.addServicesLabels=true
      - --metrics.prometheus.buckets=0.1,0.3,1.2,5.0
      - --entryPoints.metrics.address=:9100
      - --metrics.prometheus.entryPoint=metrics
      - --certificatesresolvers.letsencrypt.acme.email=${TRAEFIK_ACME_EMAIL}
      - --certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json
      - --certificatesresolvers.letsencrypt.acme.httpchallenge=true
      - --certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web
      - --accesslog=true
      - --log.level=INFO
    ports:
      - "80:80"
      - "443:443"
#      - "8080:8080"
      # Expose metrics endpoint for Prometheus
      - "9100:9100"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik_letsencrypt:/letsencrypt
      - ./traefik_users:/run/traefik_users:ro
    networks:
      - proxy
    restart: unless-stopped
    labels:
      - autoheal=true
      - traefik.enable=true
      - traefik.http.routers.traefik.rule=Host(`traefik.${DOMAIN}`)
      - traefik.http.routers.traefik.entrypoints=websecure
      - traefik.http.routers.traefik.tls=true
      - traefik.http.routers.traefik.tls.certresolver=letsencrypt
      - traefik.http.routers.traefik.service=api@internal
      - traefik.http.routers.traefik.middlewares=traefik-auth
      - traefik.http.middlewares.traefik-auth.basicauth.usersfile=/run/traefik_users
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "5"

  transcriptor:
    build: .
    image: stremovskyy/transcription-app:1.2.2
    expose:
      - 8080
    env_file:
      - .env
    volumes:
      - ./uploads:/app/uploads
      - .env:/app/.env
      - whisper_cache:/home/appuser/.cache/whisper
      - torch_cache:/home/appuser/.cache/torch
    networks:
      - proxy
    restart: unless-stopped
    deploy:
      replicas: ${REPLICAS:-3}
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [ gpu ]
    labels:
      - traefik.enable=true
      # HTTP on 80
      - traefik.http.routers.transcriptor-web.rule=Host(`${DOMAIN}`)
      - traefik.http.routers.transcriptor-web.entrypoints=web
      - traefik.http.routers.transcriptor-web.middlewares=transcriptor-https-redirect
      - traefik.http.middlewares.transcriptor-https-redirect.redirectscheme.scheme=https
      # HTTPS on 443
      - traefik.http.routers.transcriptor-secure.rule=Host(`${DOMAIN}`)
      - traefik.http.routers.transcriptor-secure.entrypoints=websecure
      - traefik.http.routers.transcriptor-secure.tls=true
      - traefik.http.routers.transcriptor-secure.tls.certresolver=letsencrypt
      # Plain HTTP on 8080 for load balancer
      - traefik.http.routers.transcriptor-8080.rule=Host(`${DOMAIN}`) && PathPrefix(`/`)
      - traefik.http.routers.transcriptor-8080.entrypoints=web8080
      - traefik.http.routers.transcriptor-8080.service=transcriptor
      - traefik.http.services.transcriptor.loadbalancer.server.port=8080
      - traefik.http.middlewares.transcriptor-compress.compress=true
      - traefik.http.routers.transcriptor-secure.middlewares=transcriptor-compress
      - traefik.http.routers.transcriptor-8080.middlewares=transcriptor-compress
      - autoheal=true
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "5"

  autoheal:
    image: willfarrell/autoheal:latest
    container_name: autoheal
    restart: unless-stopped
    environment:
      - AUTOHEAL_CONTAINER_LABEL=autoheal
      - AUTOHEAL_INTERVAL=10
      - AUTOHEAL_START_PERIOD=120
      - AUTOHEAL_DEFAULT_STOP_TIMEOUT=10
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - proxy
    logging:
      driver: json-file
      options:
        max-size: "5m"
        max-file: "3"

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
      - '--storage.tsdb.retention.time=30d'
    expose:
      - "9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - proxy
    restart: unless-stopped
    labels:
      - autoheal=true
      - traefik.enable=true
      - traefik.http.routers.prometheus.rule=Host(`prometheus.${DOMAIN}`)
      - traefik.http.routers.prometheus.entrypoints=websecure
      - traefik.http.routers.prometheus.tls=true
      - traefik.http.routers.prometheus.tls.certresolver=letsencrypt
      - traefik.http.routers.prometheus.middlewares=traefik-auth
      - traefik.http.services.prometheus.loadbalancer.server.port=9090
    logging:
      driver: json-file
      options:
        max-size: "10m"

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    expose:
      - "3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    networks:
      - proxy
    restart: unless-stopped
    depends_on:
      - prometheus
    labels:
      - autoheal=true
      - traefik.enable=true
      - traefik.http.routers.grafana.rule=Host(`grafana.${DOMAIN}`)
      - traefik.http.routers.grafana.entrypoints=websecure
      - traefik.http.routers.grafana.tls=true
      - traefik.http.routers.grafana.tls.certresolver=letsencrypt
      - traefik.http.services.grafana.loadbalancer.server.port=3000
    logging:
      driver: json-file
      options:
        max-size: "10m"

volumes:
  traefik_letsencrypt:
    name: traefik_letsencrypt
  whisper_cache:
    name: whisper_cache
  torch_cache:
    name: torch_cache
  prometheus_data:
  grafana_data:

networks:
  proxy:
    name: proxy
    driver: bridge
